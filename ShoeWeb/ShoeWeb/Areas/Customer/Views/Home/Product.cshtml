
@{
    ViewBag.Title = "Product";
    Layout = "~/Areas/Customer/Views/Shared/_Layout.cshtml";
}

@model ShoeWeb.Areas.Customer.CustomertVM.ProductVM


@using ShoeWeb.Data;
@using PagedList;
@using PagedList.Mvc;





<div class="small-container">
    <div class="row">
        <!-- Sidebar với các bộ lọc -->
        <div class="col-1 filters-sidebar">
            <div>
                <strong>Danh mục sản phẩm</strong>
                <ul class="category-list">
                    @foreach (var category in Model.Categories)
                    {
                        <li>
                            <input type="checkbox" class="filter-checkbox" data-filter="@category.cateId" id="cate-@category.cateId">
                            <label for="cate-@category.cateId">@category.cateName</label>
                        </li>
                    }
                </ul>
            </div>

            <!-- Lọc theo nhãn hiệu -->
            <div>
                <strong>Nhãn hiệu</strong>
                <ul class="brand-list">
                    @foreach (var brand in Model.Brands)
                    {
                        <li>
                            <input type="checkbox" class="filter-checkbox" data-brand="@brand.brandId" id="brand-@brand.brandId">
                            <label for="brand-@brand.brandId">@brand.brandName</label>
                        </li>
                    }
                </ul>
            </div>

            <!-- Lọc theo kích thước -->
            <div>
                <strong>Kích thước</strong>
                <ul class="size-list">
                    @foreach (var size in Model.Sizes)
                    {
                        <li>
                            <input type="checkbox" class="filter-checkbox" data-size="@size.sizeId" id="size-@size.sizeId">
                            <label for="size-@size.sizeId">@size.numberSize</label>
                        </li>
                    }
                </ul>


            </div>



            <!-- Lọc theo giá -->
            <div>
                <strong>Giá</strong>
                <div class="price-range">
                    <input type="range" id="minPriceRange" min="0" max="10000000" value="0" step="1000000">
                    <input type="range" id="maxPriceRange" min="0" max="10000000" value="10000000" step="1000000">
                    <div>
                        <span id="minPriceDisplay">0</span> - <span id="maxPriceDisplay">10,000,000</span> VND
                    </div>
                </div>
            </div>

        </div>

        <!-- Container chứa sản phẩm -->
        <div class="col-2 product-container">
            <div id="product-list" class="row" style="justify-content: flex-start;">


                @foreach (var product in Model.Products)
                {
                    using (var applicationDbContext = new ApplicationDbContext())
                    {
                        // Lấy danh sách sizeId từ bảng SizeOfProduct cho sản phẩm hiện tại
                        var sizeIds = string.Join(",", applicationDbContext.sizeOfProducts
                            .Where(sop => sop.productId == product.productId)
                            .Select(sop => sop.sizeId));



                        <div class="col-4 filter-item" data-filter="@product.cateId" data-brand="@product.brandId" data-size="@sizeIds" data-price="@product.price?.ToString(" 0.##")">
                            <a href="@Url.Action("ProductDetails", "Home", new { area = "Customer", productId = product.productId })">
                                <img src="@Url.Content(product.image)" alt="@product.productName" />
                            </a>
                            <a href="@Url.Action("ProductDetails", "Home", new {area = "Customer", productId = product.productId })">
                                <h4>@product.productName</h4>
                            </a>
                            <p>@product.price.ToString("#,##0.##")đ</p>
                        </div>
                    }


                }
            </div>
        </div>

    </div>
</div>



<!-- Phân trang -->
<div class="pagination-container">
    @if (Model.Products is IPagedList)
    {
        <div>
            @Html.PagedListPager(
                (IPagedList)Model.Products,
                page => Url.Action("Product", new
                {
                    page,
                    searchTerm = TempData["SearchTerm"],
                    FilterByGender = TempData["FilterByGender"],
                    FilterSize = TempData["FilterSize"],
                    FilterByBrand = TempData["FilterByBrand"],
                    FilterByCategory = TempData["FilterByCategory"],
                    minPrice = TempData["minPrice"],
                    maxPrice = TempData["maxPrice"]
                })
            )
        </div>
    }
</div>







<!------------------------------Testimonial---------------------------------->
<div class="testimonial">
    <div class="small-container">
        <div class="row">
            <div class="col-3">
                <i class="fa fa-quote-left"></i>
                <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
                <div class="rating">
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star-o"></i>
                </div>
                <img src="~/Content/images/user-1.png">
                <h3>Sean Parkar</h3>
            </div>
            <div class="col-3">
                <i class="fa fa-quote-left"></i>
                <p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English.</p>
                <div class="rating">
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star-o"></i>
                </div>
                <img src="~/Content/images/user-2.png">
                <h3>Mike Smith</h3>
            </div>
            <div class="col-3">
                <i class="fa fa-quote-left"></i>
                <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
                <div class="rating">
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star"></i>
                    <i class="fa fa-star-o"></i>
                </div>
                <img src="~/Content/images/user-3.png">
                <h3>Mabel Joe</h3>
            </div>
        </div>
    </div>
</div>

<!----------------------------------Brands------------------------------------>
<div class="brands">
    <div class="small-container">
        <div class="row">
            <div class="col-5">
                <img src="~/Content/images/logo-godrej.png" alt="">
            </div>
            <div class="col-5">
                <img src="~/Content/images/logo-oppo.png" alt="">
            </div>
            <div class="col-5">
                <img src="~/Content/images/logo-coca-cola.png" alt="">
            </div>
            <div class="col-5">
                <img src="~/Content/images/logo-paypal.png" alt="">
            </div>
            <div class="col-5">
                <img src="~/Content/images/logo-philips.png" alt="">
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const checkboxes = document.querySelectorAll(".filter-checkbox");
        const minPriceRange = document.querySelector("#minPriceRange");
        const maxPriceRange = document.querySelector("#maxPriceRange");
        const minPriceDisplay = document.getElementById("minPriceDisplay");
        const maxPriceDisplay = document.getElementById("maxPriceDisplay");

        // Cập nhật giá hiển thị khi thay đổi thanh kéo (sự kiện 'input' để thay đổi giá trực tiếp)
        minPriceRange.addEventListener("input", function () {
            minPriceDisplay.innerText = minPriceRange.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        });
        maxPriceRange.addEventListener("input", function () {
            maxPriceDisplay.innerText = maxPriceRange.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        });

        // Áp dụng bộ lọc khi giá trị thanh kéo thay đổi
        minPriceRange.addEventListener("change", applyFilters);
        maxPriceRange.addEventListener("change", applyFilters);

        // Áp dụng bộ lọc khi checkbox thay đổi
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener("change", applyFilters);
        });

        function applyFilters() {
            const selectedCategories = getSelectedFilters(".category-list input:checked", "data-filter");
            const selectedBrands = getSelectedFilters(".brand-list input:checked", "data-brand");
            const selectedSizes = getSelectedFilters(".size-list input:checked", "data-size");
            const minPrice = parseFloat(minPriceRange.value) || 0;
            const maxPrice = parseFloat(maxPriceRange.value) || 10000000;

            const url = new URL(window.location.href);

            // Thiết lập giá trị bộ lọc
            url.searchParams.set('minPrice', minPrice);
            url.searchParams.set('maxPrice', maxPrice);
            url.searchParams.set('page', '1'); // Reset về trang 1 khi áp dụng bộ lọc mới
            url.searchParams.set('FilterByCategory', selectedCategories.join(','));
            url.searchParams.set('FilterByBrand', selectedBrands.join(','));
            url.searchParams.set('FilterSize', selectedSizes.join(','));


            // Tải lại trang với URL mới
            window.location.href = url.toString();
        }


        // Lấy danh sách bộ lọc đã chọn
        function getSelectedFilters(selector, attribute) {
            return Array.from(document.querySelectorAll(selector))
                .map(el => el.getAttribute(attribute))
                .filter(value => value);
        }
    });
</script>





<style>
    /* Container */
    .small-container {
        max-width: 1200px; /* Cập nhật chiều rộng tối đa */
        margin: 0 auto; /* Giữ căn giữa */
    }

    /* Row layout */
    .row {
        display: flex;
        flex-wrap: wrap; /* Hỗ trợ nhiều dòng nếu không đủ chỗ */
        gap: 20px; /* Thêm khoảng cách giữa các phần tử */
        position: relative; /* Cần để hỗ trợ sidebar */
        width: 1250px;
        transform: translateX(-15px); /* Dịch sang trái 10px */
    }

    /* Filters Sidebar */
    .filters-sidebar {
        position: absolute;
        left: 0;
        top: 0;
        width: 250px;
        height: 1050px;
        padding: 20px;
        background-color: #fff;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    }

        .filters-sidebar strong {
            font-size: 16px;
            color: #333;
            margin-bottom: 10px;
            display: inline-block;
        }

        /* Sidebar layout */
        .filters-sidebar ul {
            display: flex;
            flex-wrap: wrap;
            gap: 10px; /* Khoảng cách giữa các checkbox */
            padding: 0;
            list-style: none;
        }

            .filters-sidebar ul li {
                flex: 0 0 calc(50% - 10px); /* Mỗi checkbox chiếm 50% chiều rộng */
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }

        .filters-sidebar input[type="checkbox"] {
            margin-right: 10px;
        }

        .filters-sidebar label {
            font-size: 14px;
            color: #555;
        }

    /* Product Container */
    .product-container {
        margin-left: 270px; /* Để dành chỗ cho sidebar */
        flex: 1;
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start; /* Căn sản phẩm về bên trái */
        align-content: flex-start; /* Căn sản phẩm về phía trên */
        gap: 20px;
        min-height: 1650px;
        padding: 20px;
    }

    /* Filter Item */
    .filter-item {
        flex: 0 0 calc(25% - 20px); /* Chia 4 phần tử mỗi hàng */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        background-color: #fff;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        margin: 0; /* Đảm bảo không có khoảng trống không cần thiết */
    }

        /* Khi sản phẩm không đủ */
        .filter-item:last-child {
            margin-bottom: 0; /* Xóa khoảng cách cuối */
        }


        .filter-item:hover {
            transform: scale(1.05);
            box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.2);
        }

        .filter-item img {
            width: 100%;
            height: auto;
            object-fit: cover;
            transition: transform 0.3s;
        }

        .filter-item:hover img {
            transform: scale(1.1);
        }

        .filter-item h4 {
            font-size: 16px;
            color: #333;
            margin: 10px 15px;
            font-weight: bold;
        }

        .filter-item p {
            font-size: 14px;
            color: #e74c3c;
            margin: 0 15px 15px;
            font-weight: bold;
        }

        .filter-item a {
            text-decoration: none;
        }

    /* Price range */
    .price-range {
        margin: 20px 0;
    }

        .price-range input[type="range"] {
            width: 100%;
            margin: 5px 0;
        }

        .price-range span {
            font-size: 14px;
            font-weight: bold;
        }

    /* Offer section */
    .offer {
        margin: 40px 0;
        padding: 20px;
        background-color: #f4f4f4;
        border-radius: 8px;
        display: flex;
        gap: 20px;
        align-items: center;
    }

        .offer img {
            width: 100%;
            height: auto;
            max-width: 300px;
            object-fit: cover;
        }

        .offer h1 {
            color: #333;
            font-size: 24px;
            margin-bottom: 10px;
        }

        .offer p {
            color: #555;
            font-size: 16px;
        }

        .offer a {
            display: inline-block;
            margin-top: 15px;
            background-color: #ff523b;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            transition: background-color 0.3s;
        }

            .offer a:hover {
                background-color: #e84118;
            }

    /* Testimonial section */
    .testimonial {
        margin: 40px 0;
    }

        .testimonial .row {
            justify-content: center;
        }

        .testimonial .col-3 {
            flex: 0 0 calc(33.333% - 20px);
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }

        .testimonial img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 10px 0;
        }

        .testimonial h3 {
            font-size: 16px;
            color: #333;
        }

    /* Brands section */
    .brands .row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .brands img {
        width: 100px;
        height: auto;
        object-fit: contain;
        transition: transform 0.3s;
    }

        .brands img:hover {
            transform: scale(1.1);
        }
    /*phân trang*/
    .pagination-container {
        text-align: center;
        margin-top: 20px;
    }

        .pagination-container .pagination {
            display: inline-block;
            padding: 0;
            margin: 0;
        }

            .pagination-container .pagination li {
                display: inline;
            }

                .pagination-container .pagination li a,
                .pagination-container .pagination li span {
                    color: #000;
                    float: left;
                    padding: 8px 16px;
                    text-decoration: none;
                    transition: background-color 0.3s;
                    border: 1px solid #ddd;
                    margin: 0 4px;
                }

                    .pagination-container .pagination li a:hover {
                        background-color: #ddd;
                    }
</style> 